#!/usr/bin/env python3
"""
Sovereign File Tracker - Main Test Script
Simple test to verify the core logic of the SFT system.
"""

import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

# Import the core logic functions
from logic import create_new_cal_record, find_and_create_updated_record
from database import test_database_connection

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_sft_core_logic():
    """
    Test the core logic of the Sovereign File Tracker.
    
    This function:
    1. Tests database connection
    2. Simulates ingesting a new file
    3. Simulates updating the same file
    4. Prints results for verification
    """
    
    print("=" * 60)
    print("SOVEREIGN FILE TRACKER - CORE LOGIC TEST")
    print("=" * 60)
    
    # Test 1: Database Connection
    print("\n1. Testing database connection...")
    try:
        if test_database_connection():
            print("‚úÖ Database connection successful!")
        else:
            print("‚ùå Database connection failed!")
            return False
    except Exception as e:
        print(f"‚ùå Database connection error: {e}")
        return False
    
    # Test 2: Simulate ingesting a new file
    print("\n2. Testing file ingestion (create_new_cal_record)...")
    
    # Create a test file path
    test_filename = "test_document.txt"
    test_archive_path = "/path/to/archive/1234567890_test_document.txt"
    
    print(f"   Test filename: {test_filename}")
    print(f"   Test archive path: {test_archive_path}")
    
    try:
        cal_record = create_new_cal_record(test_filename, test_archive_path)
        
        if cal_record:
            print("‚úÖ File ingestion successful!")
            print(f"   Created CalRecord:")
            print(f"     - ID: {cal_record.id}")
            print(f"     - Revision: {cal_record.revision}")
            print(f"     - Original filename: {cal_record.original_filename}")
            print(f"     - Archive path: {cal_record.archive_path}")
            print(f"     - Timestamp: {cal_record.timestamp}")
            print(f"     - Tags: {cal_record.tags}")
            print(f"     - Notes: {cal_record.notes}")
            
            # Store the record for the update test
            original_record = cal_record
            
        else:
            print("‚ùå File ingestion failed!")
            return False
            
    except Exception as e:
        print(f"‚ùå File ingestion error: {e}")
        return False
    
    # Test 3: Simulate updating the same file
    print("\n3. Testing file update (find_and_create_updated_record)...")
    
    # Create a new test archive path for the update
    updated_archive_path = "/path/to/archive/1234567891_test_document.txt"
    
    print(f"   Original filename: {test_filename}")
    print(f"   Updated archive path: {updated_archive_path}")
    
    try:
        updated_cal_record = find_and_create_updated_record(test_filename, updated_archive_path)
        
        if updated_cal_record:
            print("‚úÖ File update successful!")
            print(f"   Updated CalRecord:")
            print(f"     - ID: {updated_cal_record.id}")
            print(f"     - Revision: {updated_cal_record.revision}")
            print(f"     - Original filename: {updated_cal_record.original_filename}")
            print(f"     - Archive path: {updated_cal_record.archive_path}")
            print(f"     - Timestamp: {updated_cal_record.timestamp}")
            print(f"     - Tags: {updated_cal_record.tags}")
            print(f"     - Notes: {updated_cal_record.notes}")
            
            # Verify the update worked correctly
            print(f"\n   Verification:")
            print(f"     - Same ID: {updated_cal_record.id == original_record.id}")
            print(f"     - Revision incremented: {updated_cal_record.revision == original_record.revision + 1}")
            print(f"     - Same filename: {updated_cal_record.original_filename == original_record.original_filename}")
            print(f"     - Different archive path: {updated_cal_record.archive_path != original_record.archive_path}")
            
        else:
            print("‚ùå File update failed!")
            return False
            
    except Exception as e:
        print(f"‚ùå File update error: {e}")
        return False
    
    # Test 4: Summary
    print("\n4. Test Summary")
    print("=" * 40)
    print("‚úÖ All core logic tests passed!")
    print("‚úÖ Database operations working correctly")
    print("‚úÖ File ingestion working correctly")
    print("‚úÖ File updates working correctly")
    print("‚úÖ UUID consistency maintained")
    print("‚úÖ Revision numbering working correctly")
    
    return True


def test_multiple_files():
    """
    Test with multiple different file types to ensure robustness.
    """
    print("\n" + "=" * 60)
    print("ADDITIONAL TEST: Multiple File Types")
    print("=" * 60)
    
    test_files = [
        ("document.pdf", "/archive/docs/123_document.pdf"),
        ("image.jpg", "/archive/images/456_image.jpg"),
        ("audio.mp3", "/archive/audio/789_audio.mp3"),
        ("data.json", "/archive/blobs/012_data.json")
    ]
    
    for filename, archive_path in test_files:
        print(f"\nTesting file: {filename}")
        
        # Create initial record
        cal_record = create_new_cal_record(filename, archive_path)
        if cal_record:
            print(f"  ‚úÖ Created record with ID: {cal_record.id}")
            
            # Update the record
            updated_path = archive_path.replace("/archive/", "/archive/updated/")
            updated_record = find_and_create_updated_record(filename, updated_path)
            if updated_record:
                print(f"  ‚úÖ Updated record - Revision: {updated_record.revision}")
            else:
                print(f"  ‚ùå Failed to update record")
        else:
            print(f"  ‚ùå Failed to create record")


def main():
    """
    Main entry point for the SFT test script.
    """
    # Load environment variables from .env file
    load_dotenv()
    
    print("Starting Sovereign File Tracker Core Logic Test...")
    print("Environment variables loaded from .env file")
    
    try:
        # Run the main test
        success = test_sft_core_logic()
        
        if success:
            # Run additional tests
            test_multiple_files()
            
            print("\n" + "=" * 60)
            print("üéâ ALL TESTS COMPLETED SUCCESSFULLY!")
            print("Your Sovereign File Tracker core logic is working correctly.")
            print("=" * 60)
            
            return 0
        else:
            print("\n" + "=" * 60)
            print("‚ùå TESTS FAILED!")
            print("Please check your database configuration and try again.")
            print("=" * 60)
            
            return 1
            
    except KeyboardInterrupt:
        print("\n\nTest interrupted by user.")
        return 1
    except Exception as e:
        print(f"\n\nUnexpected error during testing: {e}")
        logger.error(f"Unexpected error: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    # Exit with appropriate code
    sys.exit(main())
